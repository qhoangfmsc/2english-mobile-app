import React from 'react';
import { ScrollView, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { OnboardingStepProps } from '../../common/types';

const learningMethods = [
  {
    id: 'listening',
    name: 'Luy·ªán nghe',
    description: 'C·∫£i thi·ªán k·ªπ nƒÉng nghe hi·ªÉu',
    icon: 'üéß',
    color: '#4CAF50',
  },
  {
    id: 'speaking',
    name: 'Luy·ªán n√≥i',
    description: 'Ph√°t tri·ªÉn k·ªπ nƒÉng giao ti·∫øp',
    icon: 'üó£Ô∏è',
    color: '#2196F3',
  },
  {
    id: 'reading',
    name: 'Luy·ªán ƒë·ªçc',
    description: 'N√¢ng cao kh·∫£ nƒÉng ƒë·ªçc hi·ªÉu',
    icon: 'üìñ',
    color: '#FF9800',
  },
  {
    id: 'writing',
    name: 'Luy·ªán vi·∫øt',
    description: 'C·∫£i thi·ªán k·ªπ nƒÉng vi·∫øt',
    icon: '‚úçÔ∏è',
    color: '#9C27B0',
  },
  {
    id: 'vocabulary',
    name: 'H·ªçc t·ª´ v·ª±ng',
    description: 'M·ªü r·ªông v·ªën t·ª´ v·ª±ng',
    icon: 'üìö',
    color: '#F44336',
  },
  {
    id: 'grammar',
    name: 'Ng·ªØ ph√°p',
    description: 'N·∫Øm v·ªØng c·∫•u tr√∫c c√¢u',
    icon: 'üìù',
    color: '#607D8B',
  },
  {
    id: 'exercises',
    name: 'B√†i t·∫≠p',
    description: 'Th·ª±c h√†nh v·ªõi c√°c b√†i t·∫≠p',
    icon: 'üìã',
    color: '#795548',
  },
  {
    id: 'conversation',
    name: 'H·ªôi tho·∫°i',
    description: 'Luy·ªán t·∫≠p giao ti·∫øp th·ª±c t·∫ø',
    icon: 'üí¨',
    color: '#E91E63',
  },
];

export default function LearningMethodStep({ onboardingData, setOnboardingData }: OnboardingStepProps) {
  return (
    <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
      <View style={styles.header}>
        <Text style={styles.title}>C√°ch b·∫°n mu·ªën h·ªçc</Text>
        <Text style={styles.subtitle}>
          Ch·ªçn c√°c ph∆∞∆°ng ph√°p h·ªçc m√† b·∫°n quan t√¢m (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)
        </Text>
      </View>

      <View style={styles.listContainer}>
        {learningMethods.map((method) => {
          const isSelected = onboardingData.learningMethods.includes(method.id);
          return (
            <TouchableOpacity
              key={method.id}
              style={[
                styles.methodItem,
                isSelected && styles.methodItemSelected,
                { borderColor: isSelected ? method.color : '#E5E7EB' },
              ]}
              onPress={() => {
                setOnboardingData(prev => ({
                  ...prev,
                  learningMethods: isSelected 
                    ? prev.learningMethods.filter(id => id !== method.id)
                    : [...prev.learningMethods, method.id]
                }));
              }}
            >
              <View style={styles.methodIconContainer}>
                <Text style={styles.methodIcon}>{method.icon}</Text>
              </View>
              
              <View style={styles.methodContent}>
                <Text style={[
                  styles.methodName,
                  isSelected && { color: method.color },
                ]}>
                  {method.name}
                </Text>
                <Text style={styles.methodDescription}>
                  {method.description}
                </Text>
              </View>

              {isSelected && (
                <View style={[styles.checkmark, { backgroundColor: method.color }]}>
                  <Text style={styles.checkmarkText}>‚úì</Text>
                </View>
              )}
            </TouchableOpacity>
          );
        })}
      </View>

      {onboardingData.learningMethods.length > 0 && (
        <View style={styles.selectedCount}>
          <Text style={styles.selectedCountText}>
            ƒê√£ ch·ªçn {onboardingData.learningMethods.length} ph∆∞∆°ng ph√°p
          </Text>
        </View>
      )}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  header: {
    marginBottom: 30,
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#000000',
    textAlign: 'center',
    marginBottom: 12,
  },
  subtitle: {
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 24,
    paddingHorizontal: 20,
  },
  listContainer: {
    gap: 12,
  },
  methodItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 16,
    paddingHorizontal: 20,
    backgroundColor: '#F8F9FA',
    borderRadius: 12,
    borderWidth: 2,
  },
  methodItemSelected: {
    backgroundColor: '#F0F8FF',
  },
  methodIconContainer: {
    width: 45,
    height: 45,
    borderRadius: 22.5,
    backgroundColor: '#ffffff',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  methodIcon: {
    fontSize: 20,
  },
  methodContent: {
    flex: 1,
  },
  methodName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#000000',
    marginBottom: 2,
  },
  methodDescription: {
    fontSize: 13,
    color: '#666666',
    lineHeight: 18,
  },
  checkmark: {
    width: 24,
    height: 24,
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
  },
  checkmarkText: {
    color: '#ffffff',
    fontSize: 14,
    fontWeight: 'bold',
  },
  selectedCount: {
    marginTop: 20,
    alignItems: 'center',
  },
  selectedCountText: {
    fontSize: 14,
    color: '#007bff',
    fontWeight: '500',
  },
});
